[33mcommit e0dca40ea25f4172c49dd8f0ebbd0bdc73b33a8d[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature/HE2-L03-SP03-2[m[33m, [m[1;31morigin/feature/HE2-L03-SP03-2[m[33m)[m
Author: ratinel@gmail.com <ratinel@gmail.com>
Date:   Wed Jun 26 09:02:57 2024 +0900

    HE2-L03-SP03-2 페이지추가 5, 6, 9, 10, 21, 22, 23, 24

[1mdiff --git a/apps/he20/src/cards/L03/SP03-2/01.tsx b/apps/he20/src/cards/L03/SP03-2/01.tsx[m
[1mnew file mode 100644[m
[1mindex 000000000..a3e11ad15[m
[1m--- /dev/null[m
[1m+++ b/apps/he20/src/cards/L03/SP03-2/01.tsx[m
[36m@@ -0,0 +1,150 @@[m
[32m+[m[32mimport { L03SP03_2 } from '@/cards/L03/SP03-2/store';[m
[32m+[m[32mimport CheckSuccess from '@maidt-cntn/assets/icons/check_succes.svg';[m
[32m+[m[32mimport {[m
[32m+[m[32m  Box,[m
[32m+[m[32m  Button,[m
[32m+[m[32m  Carousel,[m
[32m+[m[32m  EStyleButtonTypes,[m
[32m+[m[32m  EStyleFontSizes,[m
[32m+[m[32m  EStyleSizes,[m
[32m+[m[32m  IQuestionProps,[m
[32m+[m[32m  SimpleAudioPlayer,[m
[32m+[m[32m  SvgIcon,[m
[32m+[m[32m  TMainHeaderInfoTypes,[m
[32m+[m[32m  Typography,[m
[32m+[m[32m} from '@maidt-cntn/ui';[m
[32m+[m[32mimport { Container } from '@maidt-cntn/ui/en';[m
[32m+[m[32mimport { useEffect, useMemo, useRef } from 'react';[m
[32m+[m[32mimport Slider from 'react-slick';[m
[32m+[m[32mimport { useRecoilState } from 'recoil';[m
[32m+[m
[32m+[m[32mconst P01 = () => {[m
[32m+[m[32m  const headerInfo: TMainHeaderInfoTypes = {[m
[32m+[m[32m    headerText: '[Read] 단어 암기',[m
[32m+[m[32m    headerPattern: 'text',[m
[32m+[m[32m  };[m
[32m+[m[32m  const questionInfo: IQuestionProps = {[m
[32m+[m[32m    size: 'large',[m
[32m+[m[32m    text: '',[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const initWordList = useMemo(() => {[m
[32m+[m[32m    const wordList = [[m
[32m+[m[32m      { id: 1, word: 'unpleasant', meaning: '불쾌한', file: 'HE1-L03-SP03-1-voca_unpleasant.mp3' },[m
[32m+[m[32m      { id: 2, word: 'distracting', meaning: '산만하게 하는', file: 'HE1-L03-SP03-1-voca_distracting.mp3' },[m
[32m+[m[32m      { id: 3, word: 'unwanted', meaning: '원하지 않는', file: 'HE1-L03-SP03-1-voca_unwanted.mp3' },[m
[32m+[m[32m      { id: 4, word: 'principle', meaning: '원리', file: 'HE1-L03-SP03-1-voca_principle.mp3' },[m
[32m+[m[32m      { id: 5, word: 'achievement', meaning: '성취', file: 'HE1-L03-SP03-1-voca_achievement.mp3' },[m
[32m+[m[32m      { id: 6, word: 'examine', meaning: '살펴 보다', file: 'HE1-L03-SP03-1-voca_examine.mp3' },[m
[32m+[m[32m      { id: 7, word: 'interference', meaning: '간섭', file: 'HE1-L03-SP03-1-voca_interference.mp3' },[m
[32m+[m[32m      { id: 8, word: 'vibration', meaning: '진동', file: 'HE1-L03-SP03-1-voca_vibration.mp3' },[m
[32m+[m[32m      { id: 9, word: 'string', meaning: '줄', file: 'HE1-L03-SP03-1-voca_string.mp3' },[m
[32m+[m[32m      { id: 10, word: 'ripple', meaning: '잔물결', file: 'HE1-L03-SP03-1-voca_ripple.mp3' },[m
[32m+[m[32m      { id: 11, word: 'interpret', meaning: '해석하다', file: 'HE1-L03-SP03-1-voca_interpret.mp3' },[m
[32m+[m[32m      { id: 12, word: 'overlap', meaning: '겹치다', file: 'HE1-L03-SP03-1-voca_overlap.mp3' },[m
[32m+[m[32m      { id: 13, word: 'constructive', meaning: '보강의', file: 'HE1-L03-SP03-1-voca_constructive.mp3' },[m
[32m+[m[32m      { id: 14, word: 'destructive', meaning: '상쇄의', file: 'HE1-L03-SP03-1-voca_destructive.mp3' },[m
[32m+[m[32m      { id: 15, word: 'peak', meaning: '정점', file: 'HE1-L03-SP03-1-voca_peak.mp3' },[m
[32m+[m[32m      { id: 16, word: 'valley', meaning: '골짜기', file: 'HE1-L03-SP03-1-voca_valley.mp3' },[m
[32m+[m[32m      { id: 17, word: 'circuitry', meaning: '회로', file: 'HE1-L03-SP03-1-voca_circuitry.mp3' },[m
[32m+[m[32m      { id: 18, word: 'analyze', meaning: '분석하다', file: 'HE1-L03-SP03-1-voca_analyze.mp3' },[m
[32m+[m[32m      { id: 19, word: 'opposite', meaning: '반대의', file: 'HE1-L03-SP03-1-voca_opposite.mp3' },[m
[32m+[m[32m      { id: 20, word: 'value', meaning: '값', file: 'HE1-L03-SP03-1-voca_value.mp3' },[m
[32m+[m[32m      { id: 21, word: 'transmit', meaning: '전송하다', file: 'HE1-L03-SP03-1-voca_transmit.mp3' },[m
[32m+[m[32m      { id: 22, word: 'surrounding', meaning: '환경', file: 'HE1-L03-SP03-1-voca_surrounding.mp3' },[m
[32m+[m[32m      { id: 23, word: 'eliminate', meaning: '제거하다', file: 'HE1-L03-SP03-1-voca_eliminate.mp3' },[m
[32m+[m[32m      { id: 24, word: 'external', meaning: '외부의', file: 'HE1-L03-SP03-1-voca_external.mp3' },[m
[32m+[m[32m      { id: 25, word: 'convert', meaning: '전환하다', file: 'HE1-L03-SP03-1-voca_convert.mp3' },[m
[32m+[m[32m      { id: 26, word: 'predictable', meaning: '예측가능한', file: 'HE1-L03-SP03-1-voca_predictable.mp3' },[m
[32m+[m[32m      { id: 27, word: 'inconsistent', meaning: '일관성 없는', file: 'HE1-L03-SP03-1-voca_inconsistent.mp3' },[m
[32m+[m[32m      { id: 29, word: 'application', meaning: '적용', file: 'HE1-L03-SP03-1-voca_application.mp3' },[m
[32m+[m[32m      { id: 30, word: 'take advantage of', meaning: '~을 이용하다', file: 'HE1-L03-SP03-1-voca_take_advantage_of.mp3' },[m
[32m+[m[32m      { id: 31, word: 'attraction', meaning: '명소', file: 'HE1-L03-SP03-1-voca_attraction.mp3' },[m
[32m+[m[32m      { id: 32, word: 'detect', meaning: '발견하다', file: 'HE1-L03-SP03-1-voca_detect.mp3' },[m
[32m+[m[32m      { id: 33, word: 'agent', meaning: '대리인', file: 'HE1-L03-SP03-1-voca_agent.mp3' },[m
[32m+[m[32m      { id: 34, word: 'disturb', meaning: '방해하다', file: 'HE1-L03-SP03-1-voca_disturb.mp3' },[m
[32m+[m[32m      { id: 35, word: 'advance', meaning: '발전하다', file: 'HE1-L03-SP03-1-voca_advance.mp3' },[m
[32m+[m[32m      { id: 36, word: 'conflict', meaning: '갈등', file: 'HE1-L03-SP03-1-voca_conflict.mp3' },[m
[32m+[m[32m      { id: 37, word: 'resident', meaning: '거주민', file: 'HE1-L03-SP03-1-voca_resident.mp3' },[m
[32m+[m[32m    ];[m
[32m+[m[32m    return wordList.map(word => ({ ...word, path: `/L03/SP03-1/${word.file}` }));[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  const [cardData, setCardData] = useRecoilState(L03SP03_2);[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    if (cardData.p01.wordList.length === 0) {[m
[32m+[m[32m      setCardData(prev => ({[m
[32m+[m[32m        ...prev,[m
[32m+[m[32m        p01: {[m
[32m+[m[32m          ...prev.p01,[m
[32m+[m[32m          wordList: initWordList.map(word => ({ ...word, memorized: false })),[m
[32m+[m[32m        },[m
[32m+[m[32m      }));[m
[32m+[m[32m    }[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  const sliderRef = useRef<Slider>(null);[m
[32m+[m[32m  const timerRef = useRef<NodeJS.Timeout | null>(null);[m
[32m+[m[32m  const onChangeSlide = (index: number) => {[m
[32m+[m[32m    timerRef.current && clearTimeout(timerRef.current);[m
[32m+[m[32m  };[m
[32m+[m[32m  const isMemorized = (id: number, status: boolean) => {[m
[32m+[m[32m    setCardData(prev => ({[m
[32m+[m[32m      ...prev,[m
[32m+[m[32m      p01: {[m
[32m+[m[32m        ...prev.p01,[m
[32m+[m[32m        wordList: prev.p01.wordList.map(word => (word.id === id ? { ...word, memorized: status } : word)),[m
[32m+[m[32m      },[m
[32m+[m[32m    }));[m
[32m+[m[32m  };[m
[32m+[m[32m  const contentTabIndexMinimum = 101;[m
[32m+[m[32m  return ([m
[32m+[m[32m    <Container headerInfo={headerInfo} questionInfo={questionInfo} vAlign='center'>[m
[32m+[m[32m      <Box hAlign='center' useFull>[m
[32m+[m[32m        <Box padding='48px 16px' width='680px' borderRadius='24px' background='white' hAlign='center' useShadow>[m
[32m+[m[32m          <Carousel data={cardData.p01.wordList} slideWidth={536} dots={false} arrowGap={-50} arrowSize={40} ref={sliderRef} onChange={onChangeSlide}>[m
[32m+[m[32m            {cardData.p01.wordList.map(({ id, meaning, memorized, word, path }, index) => {[m
[32m+[m[32m              const audioTabIndex = contentTabIndexMinimum + index * 2;[m
[32m+[m[32m              const memorizedTabIndex = contentTabIndexMinimum + index * 2 + 1;[m
[32m+[m[32m              return ([m
[32m+[m[32m                <Box key={`voca-${index}`}>[m
[32m+[m[32m                  <Box flexDirection='column' vAlign='center'>[m
[32m+[m[32m                    <SimpleAudioPlayer audioSrc={path} tabIndex={audioTabIndex} id={`${id}`} />[m
[32m+[m[32m                    <Box width='100%' marginBottom={4} overflowWrap='break-word'>[m
[32m+[m[32m                      <Typography width='100%' align='center' fontSize='var(--font-size-36)' lineHeight='50px' weight='var(--font-weight-bold)'>[m
[32m+[m[32m                        {word}[m
[32m+[m[32m                      </Typography>[m
[32m+[m[32m                    </Box>[m
[32m+[m[32m                    <Typography useGap={false} tabIndex={memorizedTabIndex}>[m
[32m+[m[32m                      {meaning}[m
[32m+[m[32m                    </Typography>[m
[32m+[m[32m                  </Box>[m
[32m+[m
[32m+[m[32m                  <Box marginTop={10} hAlign='center'>[m
[32m+[m[32m                    <Button[m
[32m+[m[32m                      size={EStyleSizes.SMALL}[m
[32m+[m[32m                      color={memorized ? EStyleButtonTypes.SUCCESS : EStyleButtonTypes.SECONDARY}[m
[32m+[m[32m                      style={{ padding: '10px 12px' }}[m
[32m+[m[32m                      useRound[m
[32m+[m[32m                      onClick={() => isMemorized(id, true)}[m
[32m+[m[32m                    >[m
[32m+[m[32m                      {memorized && ([m
[32m+[m[32m                        <Box vAlign='center' marginRight='4px'>[m
[32m+[m[32m                          <SvgIcon size='20px' src={memorized ? CheckSuccess : ''} alt='' />[m
[32m+[m[32m                        </Box>[m
[32m+[m[32m                      )}[m
[32m+[m[32m                      다 외웠어요![m
[32m+[m[32m                    </Button>[m
[32m+[m[32m                  </Box>[m
[32m+[m[32m                </Box>[m
[32m+[m[32m              );[m
[32m+[m[32m            })}[m
[32m+[m[32m          </Carousel>[m
[32m+[m[32m        </Box>[m
[32m+[m[32m      </Box>[m
[32m+[m[32m    </Container>[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mexport default P01;[m
[1mdiff --git a/apps/he20/src/cards/L03/SP03-2/02.tsx b/apps/he20/src/cards/L03/SP03-2/02.tsx[m
[1mnew file mode 100644[m
[1mindex 000000000..a08231ad4[m
[1m--- /dev/null[m
[1m+++ b/apps/he20/src/cards/L03/SP03-2/02.tsx[m
[36m@@ -0,0 +1,167 @@[m
[32m+[m[32mimport { L03SP03_2 } from '@/cards/L03/SP03-2/store';[m
[32m+[m[32mimport { Box, BoxWrap, EStyleShadowedButtonTypes, Mark, TMainHeaderInfoTypes } from '@maidt-cntn/ui';[m
[32m+[m[32mimport { Container, ShadowedButton } from '@maidt-cntn/ui/en';[m
[32m+[m[32mimport { useEffect, useMemo, useState } from 'react';[m
[32m+[m[32mimport { useRecoilState } from 'recoil';[m
[32m+[m
[32m+[m[32mconst P02 = () => {[m
[32m+[m[32m  const headerInfo: TMainHeaderInfoTypes = {[m
[32m+[m[32m    headerText: '[Read] 단어 연습',[m
[32m+[m[32m    headerPattern: 'text',[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const questionInfo = {[m
[32m+[m[32m    text: 'Match the words and meanings.',[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const wordList = useMemo([m
[32m+[m[32m    () => [[m
[32m+[m[32m      { id: 1, word: 'unwanted', meaning: '원하지 않는', meaningOrder: 6 },[m
[32m+[m[32m      { id: 2, word: 'opposite', meaning: '반대의', meaningOrder: 9 },[m
[32m+[m[32m      { id: 3, word: 'examine', meaning: '살펴 보다', meaningOrder: 2 },[m
[32m+[m[32m      { id: 4, word: 'eliminate', meaning: '제거하다', meaningOrder: 8 },[m
[32m+[m[32m      { id: 5, word: 'string', meaning: '줄', meaningOrder: 10 },[m
[32m+[m[32m      { id: 6, word: 'predictable', meaning: '예측 가능한', meaningOrder: 4 },[m
[32m+[m[32m      { id: 7, word: 'constructive', meaning: '보강의', meaningOrder: 7 },[m
[32m+[m[32m      { id: 8, word: 'application', meaning: '적용', meaningOrder: 5 },[m
[32m+[m[32m      { id: 9, word: 'valley', meaning: '골짜기', meaningOrder: 1 },[m
[32m+[m[32m      { id: 10, word: 'agent', meaning: '대리인', meaningOrder: 3 },[m
[32m+[m[32m    ],[m
[32m+[m[32m    [],[m
[32m+[m[32m  );[m
[32m+[m
[32m+[m[32m  interface IP02 {[m
[32m+[m[32m    dictionary: { [key: string]: string };[m
[32m+[m[32m    englishWordList: { word: string; isCorrect: boolean }[];[m
[32m+[m[32m    meaningList: { meaning: string; isCorrect: boolean }[];[m
[32m+[m[32m  }[m
[32m+[m[32m  const { dictionary, englishWordList, meaningList } = useMemo<IP02>(() => {[m
[32m+[m[32m    const dictionary = wordList.reduce((acc, cur) => {[m
[32m+[m[32m      return { ...acc, [cur.word]: cur.meaning };[m
[32m+[m[32m    }, {});[m
[32m+[m[32m    const englishWordList = wordList.map(word => ({ word: word.word, isCorrect: false }));[m
[32m+[m[32m    const meaningList = wordList[m
[32m+[m[32m      .sort((a, b) => (a.meaningOrder ?? 0) - (b.meaningOrder ?? 0))[m
[32m+[m[32m      .map(meaning => ({ meaning: meaning.meaning, isCorrect: false }));[m
[32m+[m[32m    return { dictionary, englishWordList, meaningList };[m
[32m+[m[32m  }, [wordList]);[m
[32m+[m
[32m+[m[32m  const [cardData, setCardData] = useRecoilState(L03SP03_2);[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    if (cardData.p02.englishWordList.length === 0) {[m
[32m+[m[32m      setCardData(prev => {[m
[32m+[m[32m        return {[m
[32m+[m[32m          ...prev,[m
[32m+[m[32m          p02: {[m
[32m+[m[32m            ...prev.p02,[m
[32m+[m[32m            dictionary: dictionary,[m
[32m+[m[32m            englishWordList: englishWordList,[m
[32m+[m[32m            meaningList: meaningList,[m
[32m+[m[32m          },[m
[32m+[m[32m        };[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  const [clickedWord, setClickedWord] = useState<string | null>();[m
[32m+[m[32m  const [clickedMeaning, setClickedMeaning] = useState<string | null>();[m
[32m+[m[32m  const [showSign, setShowSign] = useState(false);[m
[32m+[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    if (clickedWord && clickedMeaning) {[m
[32m+[m[32m      if (cardData.p02.dictionary[clickedWord] === clickedMeaning) {[m
[32m+[m[32m        const clickedWordItem = cardData.p02.englishWordList.find(word => word.word === clickedWord);[m
[32m+[m[32m        const clickedMeaningItem = cardData.p02.meaningList.find(word => word.meaning === clickedMeaning);[m
[32m+[m[32m        if (clickedWordItem && clickedMeaningItem) {[m
[32m+[m[32m          setCardData(prev => {[m
[32m+[m[32m            const _englishWordList = prev.p02.englishWordList.map(word => (word.word === clickedWord ? { ...word, isCorrect: true } : word));[m
[32m+[m[32m            const _meaningList = prev.p02.meaningList.map(word => (word.meaning === clickedMeaning ? { ...word, isCorrect: true } : word));[m
[32m+[m[32m            return {[m
[32m+[m[32m              ...prev,[m
[32m+[m[32m              p02: {[m
[32m+[m[32m                ...prev.p02,[m
[32m+[m[32m                englishWordList: _englishWordList,[m
[32m+[m[32m                meaningList: _meaningList,[m
[32m+[m[32m              },[m
[32m+[m[32m            };[m
[32m+[m[32m          });[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m[32m      setShowSign(true);[m
[32m+[m[32m      setTimeout(() => {[m
[32m+[m[32m        setShowSign(false);[m
[32m+[m[32m        setClickedWord(null);[m
[32m+[m[32m        setClickedMeaning(null);[m
[32m+[m[32m      }, 1000);[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [clickedWord, clickedMeaning, cardData.p02.dictionary, wordList]);[m
[32m+[m
[32m+[m[32m  const getGradingMark = (isCorrect: boolean) => {[m
[32m+[m[32m    return <Mark size='large' type={isCorrect ? 'correct' : 'incorrect'} />;[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <Container headerInfo={headerInfo} questionInfo={questionInfo} vAlign='flex-start'>[m
[32m+[m[32m      <BoxWrap justifyContent='space-between'>[m
[32m+[m[32m        <Box display={'grid'} gridTemplateColumns={'repeat(2, 1fr)'} gap={'20px'}>[m
[32m+[m[32m          {cardData.p02.englishWordList.map((item, index) => ([m
[32m+[m[32m            <ShadowedButton[m
[32m+[m[32m              key={item.word}[m
[32m+[m[32m              state={[m
[32m+[m[32m                item.isCorrect[m
[32m+[m[32m                  ? EStyleShadowedButtonTypes.SUCCESS[m
[32m+[m[32m                  : showSign && clickedWord === item.word && cardData.p02.dictionary[clickedWord] !== clickedMeaning[m
[32m+[m[32m                  ? EStyleShadowedButtonTypes.WARNING[m
[32m+[m[32m                  : clickedWord === item.word[m
[32m+[m[32m                  ? EStyleShadowedButtonTypes.PRIMARY[m
[32m+[m[32m                  : EStyleShadowedButtonTypes.DEFAULT[m
[32m+[m[32m              }[m
[32m+[m[32m              tabIndex={102 + index}[m
[32m+[m[32m              width={'184px'}[m
[32m+[m[32m              height={'60px'}[m
[32m+[m[32m              label={item.word}[m
[32m+[m[32m              contentLength={item.word.length}[m
[32m+[m[32m              fontSize='var(--font-size-24)'[m
[32m+[m[32m              maxWordLength={14}[m
[32m+[m[32m              onClick={() => {[m
[32m+[m[32m                !showSign && setClickedWord(item.word);[m
[32m+[m[32m              }}[m
[32m+[m[32m            />[m
[32m+[m[32m          ))}[m
[32m+[m[32m        </Box>[m
[32m+[m
[32m+[m[32m        <Box display={'grid'} gridTemplateColumns={'repeat(2, 1fr)'} gap={'20px'}>[m
[32m+[m[32m          {cardData.p02.meaningList.map((item, index) => ([m
[32m+[m[32m            <ShadowedButton[m
[32m+[m[32m              key={item.meaning}[m
[32m+[m[32m              state={[m
[32m+[m[32m                item.isCorrect[m
[32m+[m[32m                  ? EStyleShadowedButtonTypes.SUCCESS[m
[32m+[m[32m                  : showSign && clickedMeaning === item.meaning && cardData.p02.dictionary[clickedMeaning] !== clickedWord[m
[32m+[m[32m                  ? EStyleShadowedButtonTypes.WARNING[m
[32m+[m[32m                  : clickedMeaning === item.meaning[m
[32m+[m[32m                  ? EStyleShadowedButtonTypes.PRIMARY[m
[32m+[m[32m                  : EStyleShadowedButtonTypes.DEFAULT[m
[32m+[m[32m              }[m
[32m+[m[32m              tabIndex={102 + wordList.length + index}[m
[32m+[m[32m              width={'184px'}[m
[32m+[m[32m              height={'60px'}[m
[32m+[m[32m              label={item.meaning}[m
[32m+[m[32m              contentLength={item.meaning.length}[m
[32m+[m[32m              fontSize='var(--font-size-24)'[m
[32m+[m[32m              maxWordLength={15}[m
[32m+[m[32m              onClick={() => {[m
[32m+[m[32m                !showSign && setClickedMeaning(item.meaning);[m
[32m+[m[32m              }}[m
[32m+[m[32m            />[m
[32m+[m[32m          ))}[m
[32m+[m[32m        </Box>[m
[32m+[m[32m      </BoxWrap>[m
[32m+[m
[32m+[m[32m      {showSign && clickedWord && getGradingMark(cardData.p02.dictionary[clickedWord] === clickedMeaning)}[m
[32m+[m[32m    </Container>[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mexport default P02;[m
[1mdiff --git a/apps/he20/src/cards/L03/SP03-2/03.tsx b/apps/he20/src/cards/L03/SP03-2/03.tsx[m
[1mnew file mode 100644[m
[1mindex 000000000..ea44bdda5[m
[1m--- /dev/null[m
[1m+++ b/apps/he20/src/cards/L03/SP03-2/03.tsx[m
[36m@@ -0,0 +1,199 @@[m
[32m+[m[32mimport usePageData from '@/hooks/